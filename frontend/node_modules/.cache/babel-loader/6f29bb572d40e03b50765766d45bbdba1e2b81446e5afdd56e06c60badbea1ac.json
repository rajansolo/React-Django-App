{"ast":null,"code":"import _objectSpread from\"D:/Projects/version 2/CigarChief/blog_project/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from\"react\";import{Routes,Route,Link}from\"react-router-dom\";import\"./index.css\";import PostForm from\"./Components/PostForm\";import PostList from\"./Components/PostList\";import FetchData from\"./Components/FetchData\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[posts,setPosts]=useState([]);const[editingPostId,setEditingPostId]=useState(null);useEffect(()=>{fetch(\"http://127.0.0.1:8000/api/posts/\").then(response=>response.json()).then(data=>setPosts(data));},[]);const handleAddPost=newPost=>{setPosts([newPost,...posts]);};const handleUpdatePost=updatedPost=>{setPosts(posts.map(post=>post.id===updatedPost.id?_objectSpread(_objectSpread({},post),updatedPost):post));};const handleDeletePost=postId=>{setPosts(posts.filter(post=>post.id!==postId));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"nav\",{className:\"navbar\",children:[/*#__PURE__*/_jsx(Link,{to:\"/\",className:\"nav-link\",children:\"Home\"}),/*#__PURE__*/_jsx(Link,{to:\"/fetch-data\",className:\"nav-link\",children:\"Fetch Data\"})]}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"header\",children:\"Blogscape\"}),/*#__PURE__*/_jsx(PostForm,{onAddPost:handleAddPost}),/*#__PURE__*/_jsx(PostList,{posts:posts,editingPostId:editingPostId,setEditingPostId:setEditingPostId,onUpdatePost:handleUpdatePost,onDeletePost:handleDeletePost})]})}),/*#__PURE__*/_jsx(Route,{path:\"/fetch-data\",element:/*#__PURE__*/_jsx(FetchData,{})})]})]});}export default App;// import React, { useState, useEffect } from \"react\";\n// import \"./index.css\";\n// import PostForm from \"./Components/PostForm\";\n// import PostList from \"./Components/PostList\";\n// function App() {\n//   const [posts, setPosts] = useState([]);\n//   const [editingPostId, setEditingPostId] = useState(null);\n//   useEffect(() => {\n//     fetch(\"http://127.0.0.1:8000/api/posts/\")\n//       .then((response) => response.json())\n//       .then((data) => setPosts(data));\n//   }, []);\n//   const handleAddPost = (newPost) => {\n//     setPosts([newPost, ...posts]);\n//   };\n//   const handleUpdatePost = (updatedPost) => {\n//     setPosts(\n//       posts.map((post) =>\n//         post.id === updatedPost.id ? { ...post, ...updatedPost } : post\n//       )\n//     );\n//   };\n//   const handleDeletePost = (postId) => {\n//     setPosts(posts.filter((post) => post.id !== postId));\n//   };\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"header\">Blogscape</h1>\n//       <PostForm onAddPost={handleAddPost} />\n//       <PostList\n//         posts={posts}\n//         editingPostId={editingPostId}\n//         setEditingPostId={setEditingPostId}\n//         onUpdatePost={handleUpdatePost}\n//         onDeletePost={handleDeletePost}\n//       />\n//     </div>\n//   );\n// }\n// export default App;\n//********************* */ Working code Start**/////////////////////////\n// import React, { useState, useEffect } from \"react\";\n// import \"./index.css\";\n// function App() {\n//   const [posts, setPosts] = useState([]);\n//   const [username, setUsername] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [editingPostId, setEditingPostId] = useState(null);\n//   const [editingContent, setEditingContent] = useState(\"\");\n//   useEffect(() => {\n//     fetch(\"http://127.0.0.1:8000/api/posts/\")\n//       .then((response) => response.json())\n//       .then((data) => setPosts(data));\n//   }, []);\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const newPost = { username, content };\n//     fetch(\"http://127.0.0.1:8000/api/posts/\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(newPost),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setPosts([data, ...posts]);\n//         setUsername(\"\");\n//         setContent(\"\");\n//       });\n//   };\n//   const handleEdit = (postId) => {\n//     setEditingPostId(postId);\n//     const postToEdit = posts.find((post) => post.id === postId);\n//     setEditingContent(postToEdit.content);\n//   };\n//   const handleSaveEdit = (postId) => {\n//     fetch(`http://127.0.0.1:8000/api/posts/${postId}/`, {\n//       method: \"PUT\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify({ content: editingContent }),\n//     })\n//       .then((response) => response.json())\n//       .then((updatedPost) => {\n//         setPosts(\n//           posts.map((post) =>\n//             post.id === postId ? { ...post, ...updatedPost } : post\n//           )\n//         );\n//         setEditingPostId(null);\n//         setEditingContent(\"\");\n//       });\n//   };\n//   const handleDelete = (postId) => {\n//     fetch(`http://127.0.0.1:8000/api/posts/${postId}/`, {\n//       method: \"DELETE\",\n//     })\n//       .then(() => {\n//         setPosts(posts.filter((post) => post.id !== postId));\n//       })\n//       .catch((error) => console.error(\"Error deleting post:\", error));\n//   };\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"header\">Blog Posts</h1>\n//       <form className=\"post-form\" onSubmit={handleSubmit}>\n//         <div className=\"form-group\">\n//           <label className=\"label\" htmlFor=\"username\">\n//             Username:\n//           </label>\n//           <input\n//             className=\"input\"\n//             id=\"username\"\n//             type=\"text\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group\">\n//           <label className=\"label\" htmlFor=\"content\">\n//             Content:\n//           </label>\n//           <textarea\n//             className=\"textarea\"\n//             id=\"content\"\n//             value={content}\n//             onChange={(e) => setContent(e.target.value)}\n//             required\n//           ></textarea>\n//         </div>\n//         <button className=\"submit-button\" type=\"submit\">\n//           Post\n//         </button>\n//       </form>\n//       <div className=\"posts-container\">\n//         <h2>All Blog Posts</h2>\n//         {posts.map((post) => (\n//           <div key={post.id} className=\"post\">\n//             <div className=\"post-header\">\n//               <span>{post.username}</span>\n//               <span>{new Date(post.created_at).toLocaleString()}</span>\n//             </div>\n//             <div className=\"post-content\">\n//               {editingPostId === post.id ? (\n//                 <>\n//                   <textarea\n//                     className=\"textarea\"\n//                     value={editingContent}\n//                     onChange={(e) => setEditingContent(e.target.value)}\n//                   ></textarea>\n//                   <button\n//                     className=\"edit-button\"\n//                     onClick={() => handleSaveEdit(post.id)}\n//                   >\n//                     Save\n//                   </button>\n//                   <button\n//                     className=\"cancel-button\"\n//                     onClick={() => setEditingPostId(null)}\n//                   >\n//                     Cancel\n//                   </button>\n//                 </>\n//               ) : (\n//                 <p>{post.content}</p>\n//               )}\n//             </div>\n//             {post.last_edited && (\n//               <div className=\"post-footer\">\n//                 <small>\n//                   Last Edited: {new Date(post.last_edited).toLocaleString()}\n//                 </small>\n//               </div>\n//             )}\n//             <div className=\"post-actions\">\n//               <button\n//                 className=\"edit-button\"\n//                 onClick={() => handleEdit(post.id)}\n//               >\n//                 Edit\n//               </button>\n//               <button\n//                 className=\"delete-button\"\n//                 onClick={() => handleDelete(post.id)}\n//               >\n//                 Delete\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\n//********************* */ Working code end**/////////////////////////","map":{"version":3,"names":["React","useState","useEffect","Routes","Route","Link","PostForm","PostList","FetchData","jsx","_jsx","jsxs","_jsxs","App","posts","setPosts","editingPostId","setEditingPostId","fetch","then","response","json","data","handleAddPost","newPost","handleUpdatePost","updatedPost","map","post","id","_objectSpread","handleDeletePost","postId","filter","children","className","to","path","element","onAddPost","onUpdatePost","onDeletePost"],"sources":["D:/Projects/version 2/CigarChief/blog_project/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport \"./index.css\";\nimport PostForm from \"./Components/PostForm\";\nimport PostList from \"./Components/PostList\";\nimport FetchData from \"./Components/FetchData\";\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [editingPostId, setEditingPostId] = useState(null);\n\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:8000/api/posts/\")\n      .then((response) => response.json())\n      .then((data) => setPosts(data));\n  }, []);\n\n  const handleAddPost = (newPost) => {\n    setPosts([newPost, ...posts]);\n  };\n\n  const handleUpdatePost = (updatedPost) => {\n    setPosts(\n      posts.map((post) =>\n        post.id === updatedPost.id ? { ...post, ...updatedPost } : post\n      )\n    );\n  };\n\n  const handleDeletePost = (postId) => {\n    setPosts(posts.filter((post) => post.id !== postId));\n  };\n\n  return (\n    <div>\n      {/* Navigation Bar */}\n      <nav className=\"navbar\">\n        <Link to=\"/\" className=\"nav-link\">\n          Home\n        </Link>\n        <Link to=\"/fetch-data\" className=\"nav-link\">\n          Fetch Data\n        </Link>\n      </nav>\n\n      {/* Routes for Pages */}\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <div className=\"app-container\">\n              <h1 className=\"header\">Blogscape</h1>\n              <PostForm onAddPost={handleAddPost} />\n              <PostList\n                posts={posts}\n                editingPostId={editingPostId}\n                setEditingPostId={setEditingPostId}\n                onUpdatePost={handleUpdatePost}\n                onDeletePost={handleDeletePost}\n              />\n            </div>\n          }\n        />\n        <Route path=\"/fetch-data\" element={<FetchData />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./index.css\";\n// import PostForm from \"./Components/PostForm\";\n// import PostList from \"./Components/PostList\";\n\n// function App() {\n//   const [posts, setPosts] = useState([]);\n//   const [editingPostId, setEditingPostId] = useState(null);\n\n//   useEffect(() => {\n//     fetch(\"http://127.0.0.1:8000/api/posts/\")\n//       .then((response) => response.json())\n//       .then((data) => setPosts(data));\n//   }, []);\n\n//   const handleAddPost = (newPost) => {\n//     setPosts([newPost, ...posts]);\n//   };\n\n//   const handleUpdatePost = (updatedPost) => {\n//     setPosts(\n//       posts.map((post) =>\n//         post.id === updatedPost.id ? { ...post, ...updatedPost } : post\n//       )\n//     );\n//   };\n\n//   const handleDeletePost = (postId) => {\n//     setPosts(posts.filter((post) => post.id !== postId));\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"header\">Blogscape</h1>\n//       <PostForm onAddPost={handleAddPost} />\n//       <PostList\n//         posts={posts}\n//         editingPostId={editingPostId}\n//         setEditingPostId={setEditingPostId}\n//         onUpdatePost={handleUpdatePost}\n//         onDeletePost={handleDeletePost}\n//       />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//********************* */ Working code Start**/////////////////////////\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./index.css\";\n\n// function App() {\n//   const [posts, setPosts] = useState([]);\n//   const [username, setUsername] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [editingPostId, setEditingPostId] = useState(null);\n//   const [editingContent, setEditingContent] = useState(\"\");\n\n//   useEffect(() => {\n//     fetch(\"http://127.0.0.1:8000/api/posts/\")\n//       .then((response) => response.json())\n//       .then((data) => setPosts(data));\n//   }, []);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     const newPost = { username, content };\n\n//     fetch(\"http://127.0.0.1:8000/api/posts/\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(newPost),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setPosts([data, ...posts]);\n//         setUsername(\"\");\n//         setContent(\"\");\n//       });\n//   };\n\n//   const handleEdit = (postId) => {\n//     setEditingPostId(postId);\n//     const postToEdit = posts.find((post) => post.id === postId);\n//     setEditingContent(postToEdit.content);\n//   };\n\n//   const handleSaveEdit = (postId) => {\n//     fetch(`http://127.0.0.1:8000/api/posts/${postId}/`, {\n//       method: \"PUT\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify({ content: editingContent }),\n//     })\n//       .then((response) => response.json())\n//       .then((updatedPost) => {\n//         setPosts(\n//           posts.map((post) =>\n//             post.id === postId ? { ...post, ...updatedPost } : post\n//           )\n//         );\n//         setEditingPostId(null);\n//         setEditingContent(\"\");\n//       });\n//   };\n\n//   const handleDelete = (postId) => {\n//     fetch(`http://127.0.0.1:8000/api/posts/${postId}/`, {\n//       method: \"DELETE\",\n//     })\n//       .then(() => {\n//         setPosts(posts.filter((post) => post.id !== postId));\n//       })\n//       .catch((error) => console.error(\"Error deleting post:\", error));\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"header\">Blog Posts</h1>\n\n//       <form className=\"post-form\" onSubmit={handleSubmit}>\n//         <div className=\"form-group\">\n//           <label className=\"label\" htmlFor=\"username\">\n//             Username:\n//           </label>\n//           <input\n//             className=\"input\"\n//             id=\"username\"\n//             type=\"text\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group\">\n//           <label className=\"label\" htmlFor=\"content\">\n//             Content:\n//           </label>\n//           <textarea\n//             className=\"textarea\"\n//             id=\"content\"\n//             value={content}\n//             onChange={(e) => setContent(e.target.value)}\n//             required\n//           ></textarea>\n//         </div>\n//         <button className=\"submit-button\" type=\"submit\">\n//           Post\n//         </button>\n//       </form>\n\n//       <div className=\"posts-container\">\n//         <h2>All Blog Posts</h2>\n//         {posts.map((post) => (\n//           <div key={post.id} className=\"post\">\n//             <div className=\"post-header\">\n//               <span>{post.username}</span>\n//               <span>{new Date(post.created_at).toLocaleString()}</span>\n//             </div>\n//             <div className=\"post-content\">\n//               {editingPostId === post.id ? (\n//                 <>\n//                   <textarea\n//                     className=\"textarea\"\n//                     value={editingContent}\n//                     onChange={(e) => setEditingContent(e.target.value)}\n//                   ></textarea>\n//                   <button\n//                     className=\"edit-button\"\n//                     onClick={() => handleSaveEdit(post.id)}\n//                   >\n//                     Save\n//                   </button>\n//                   <button\n//                     className=\"cancel-button\"\n//                     onClick={() => setEditingPostId(null)}\n//                   >\n//                     Cancel\n//                   </button>\n//                 </>\n//               ) : (\n//                 <p>{post.content}</p>\n//               )}\n//             </div>\n//             {post.last_edited && (\n//               <div className=\"post-footer\">\n//                 <small>\n//                   Last Edited: {new Date(post.last_edited).toLocaleString()}\n//                 </small>\n//               </div>\n//             )}\n//             <div className=\"post-actions\">\n//               <button\n//                 className=\"edit-button\"\n//                 onClick={() => handleEdit(post.id)}\n//               >\n//                 Edit\n//               </button>\n//               <button\n//                 className=\"delete-button\"\n//                 onClick={() => handleDelete(post.id)}\n//               >\n//                 Delete\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//********************* */ Working code end**/////////////////////////\n"],"mappings":"2IAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,MAAM,CAAEC,KAAK,CAAEC,IAAI,KAAQ,kBAAkB,CACtD,MAAO,aAAa,CACpB,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAC5C,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAC5C,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE/C,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACe,aAAa,CAAEC,gBAAgB,CAAC,CAAGhB,QAAQ,CAAC,IAAI,CAAC,CAExDC,SAAS,CAAC,IAAM,CACdgB,KAAK,CAAC,kCAAkC,CAAC,CACtCC,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,EAAKP,QAAQ,CAACO,IAAI,CAAC,CAAC,CACnC,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,aAAa,CAAIC,OAAO,EAAK,CACjCT,QAAQ,CAAC,CAACS,OAAO,CAAE,GAAGV,KAAK,CAAC,CAAC,CAC/B,CAAC,CAED,KAAM,CAAAW,gBAAgB,CAAIC,WAAW,EAAK,CACxCX,QAAQ,CACND,KAAK,CAACa,GAAG,CAAEC,IAAI,EACbA,IAAI,CAACC,EAAE,GAAKH,WAAW,CAACG,EAAE,CAAAC,aAAA,CAAAA,aAAA,IAAQF,IAAI,EAAKF,WAAW,EAAKE,IAC7D,CACF,CAAC,CACH,CAAC,CAED,KAAM,CAAAG,gBAAgB,CAAIC,MAAM,EAAK,CACnCjB,QAAQ,CAACD,KAAK,CAACmB,MAAM,CAAEL,IAAI,EAAKA,IAAI,CAACC,EAAE,GAAKG,MAAM,CAAC,CAAC,CACtD,CAAC,CAED,mBACEpB,KAAA,QAAAsB,QAAA,eAEEtB,KAAA,QAAKuB,SAAS,CAAC,QAAQ,CAAAD,QAAA,eACrBxB,IAAA,CAACL,IAAI,EAAC+B,EAAE,CAAC,GAAG,CAACD,SAAS,CAAC,UAAU,CAAAD,QAAA,CAAC,MAElC,CAAM,CAAC,cACPxB,IAAA,CAACL,IAAI,EAAC+B,EAAE,CAAC,aAAa,CAACD,SAAS,CAAC,UAAU,CAAAD,QAAA,CAAC,YAE5C,CAAM,CAAC,EACJ,CAAC,cAGNtB,KAAA,CAACT,MAAM,EAAA+B,QAAA,eACLxB,IAAA,CAACN,KAAK,EACJiC,IAAI,CAAC,GAAG,CACRC,OAAO,cACL1B,KAAA,QAAKuB,SAAS,CAAC,eAAe,CAAAD,QAAA,eAC5BxB,IAAA,OAAIyB,SAAS,CAAC,QAAQ,CAAAD,QAAA,CAAC,WAAS,CAAI,CAAC,cACrCxB,IAAA,CAACJ,QAAQ,EAACiC,SAAS,CAAEhB,aAAc,CAAE,CAAC,cACtCb,IAAA,CAACH,QAAQ,EACPO,KAAK,CAAEA,KAAM,CACbE,aAAa,CAAEA,aAAc,CAC7BC,gBAAgB,CAAEA,gBAAiB,CACnCuB,YAAY,CAAEf,gBAAiB,CAC/BgB,YAAY,CAAEV,gBAAiB,CAChC,CAAC,EACC,CACN,CACF,CAAC,cACFrB,IAAA,CAACN,KAAK,EAACiC,IAAI,CAAC,aAAa,CAACC,OAAO,cAAE5B,IAAA,CAACF,SAAS,GAAE,CAAE,CAAE,CAAC,EAC9C,CAAC,EACN,CAAC,CAEV,CAEA,cAAe,CAAAK,GAAG,CAElignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}